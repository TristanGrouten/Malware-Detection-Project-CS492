import java.util.*;
import java.io.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

//creates the hash for a file using the MD5 algorithm
public class malwareDetection
{
    public static void main(String[] args) throws NoSuchAlgorithmException, IOException 
    { 
        //File nameme in src folder
        String fileName = "test_file.txt";
        
        //Hashing algorithm to be used (MD5, SHA-1, or SHA-256)
        String hashingAlgo = "MD5";

        //Check for file change
        if(checkForChanges(fileName, hashingAlgo))
          System.out.println("File change detected");
        else
          System.out.println("No change detected");

        //Compare files to known hash lists
        if(compareFiles(fileName, hashingAlgo))
          System.out.println("File found in hash list");
        else
          System.out.println("File not found in list");

        //Create the file to be hashed
        File fileToHash = new File("src/" + fileName);
         
        //Use message-digest algorithm
        MessageDigest hashAlgo = MessageDigest.getInstance(hashingAlgo);
        
        //Get the hash
        String hash = getFileHash(hashAlgo, fileToHash);

        //print out the hash of file
        System.out.println(hash);
    }

    //Compares file input to stored hash in file
    //Inputs file name and hashing algorithm name
    //Outputs true if file has changed, false if no change detected or no previous hash found
    //Updates old hash with new hash if change is detected
    private static Boolean checkForChanges(String fileName, String hashingAlgo) throws NoSuchAlgorithmException, IOException 
    {
      MessageDigest hashAlgo = MessageDigest.getInstance(hashingAlgo);
      File curFile = new File("src/" + fileName);
      File oldHash = new File("src/ChangeDetectionLists/" + fileName);
      String curHash = getFileHash(hashAlgo, curFile);

      if(oldHash.createNewFile()){ //tries to create file, used to check if file exists yet
        FileWriter hashToWrite = new FileWriter("src/ChangeDetectionLists/" + fileName);
        hashToWrite.write(curHash);
        hashToWrite.close();
        return false;
      }else{
        Scanner scan = new Scanner(oldHash);
        if(curHash.equals(scan.nextLine())){
          scan.close();
          return false;
        }else{
          FileWriter hashToWrite = new FileWriter("src/ChangeDetectionLists/" + fileName);
          hashToWrite.write(curHash);
          hashToWrite.close();
          scan.close();
          return true;
        }
      }
    }


    //Compares given file among existing hash lists
    //Outputs true if file found in hash list, false if not in list
    private static Boolean compareFiles(String fileName, String hashingAlgo) throws NoSuchAlgorithmException, IOException 
    {
      MessageDigest hashAlgo = MessageDigest.getInstance(hashingAlgo);
      File curFile = new File("src/" + fileName);
      String curHash = getFileHash(hashAlgo, curFile);

      Scanner scan = new Scanner(new File("src/HashComparisonLists/" + hashingAlgo + ".txt"));
      while(scan.hasNext()){
        if(curHash.equals(scan.nextLine()))
          return true;
      }
      return false;
    }

    private static String getFileHash(MessageDigest md, File fileToHash) throws IOException
    {
      //Use file input stream to read the contents of file
      FileInputStream readFile = new FileInputStream(fileToHash);
       
      //Create array to read data in smaller pieces
      byte[] byteArr = new byte[1024];
      int bCount = 0; 
        
      //Read file data and update in message digest
      while ((bCount = readFile.read(byteArr)) != -1) 
      {
        md.update(byteArr, 0, bCount);
      }
       
      //close file input stream
      readFile.close();
       
      //Get the bytes of the hash
      byte[] bts = md.digest();
       
      //Convert bytes from decimal to hexadecimal format
      StringBuilder build = new StringBuilder();
      for(int i=0; i<bts.length; i++)
      {
        build.append(Integer.toString((bts[i] & 0xff) + 0x100, 16).substring(1));
      }
       
      //return hash of file
       return build.toString();
    }
}
