import java.util.*;
import java.io.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

//Used to detect malware through change and signature detection
public class malwareDetection
{
    public static void main(String[] args) throws NoSuchAlgorithmException, IOException 
    { 
        //File nameme in src folder
        String fileName = "test_file.txt";
        
        //Hashing algorithm to be used (MD5, SHA-1, or SHA-256)
        String hashingAlgo = "MD5";

        //Check for file change
        System.out.println(checkForChanges(fileName, hashingAlgo));

        //Compare files to known hash lists
        System.out.println(compareFiles(fileName, hashingAlgo));
        
        //Get the hash
        String hash = getFileHash(fileName, hashingAlgo);
        //print out the hash of file
        System.out.println(hash);
    }

    //Compares file input to stored hash in file
    //Inputs file name and hashing algorithm name
    //Outputs true if file has changed, false if no change detected or no previous hash found
    //Updates old hash with new hash if change is detected
    private static String checkForChanges(String fileName, String hashingAlgo) throws NoSuchAlgorithmException, IOException 
    {
      MessageDigest hashAlgo = MessageDigest.getInstance(hashingAlgo);
      File curFile = new File("src/" + fileName);
      File oldHash = new File("src/ChangeDetectionLists/" + fileName);
      String curHash = hashFile(hashAlgo, curFile);
      Boolean change=false;
      String retStr = "";

      if(oldHash.createNewFile()){ //tries to create file, used to check if file exists yet
        FileWriter hashToWrite = new FileWriter("src/ChangeDetectionLists/" + fileName);
        hashToWrite.write(curHash);
        hashToWrite.close();
        retStr= "No previous hash";
      }
      else
      {
        Scanner scan = new Scanner(oldHash);
        if(curHash.equals(scan.nextLine()))
        {
          scan.close();
          retStr= "No change detected";
        }
        else
        {
          FileWriter hashToWrite = new FileWriter("src/ChangeDetectionLists/" + fileName);
          hashToWrite.write(curHash);
          hashToWrite.close();
          scan.close();
          change=true;
          retStr= "Change detected";
        }
      }
      if (change==true)
      {
          return signatureDetection(curFile,hashingAlgo);
      } 
      return retStr;
    }
    
    //Compares input file to known bad signatures on file
    //Inputs file and the hashing algorithm
    //Outputs whether or not malware was detected  
    private static String signatureDetection(File fileName, String hashingAlgo) throws IOException
    {
        FileInputStream readCurrFile = new FileInputStream(fileName);
        FileInputStream readKnownBad = new FileInputStream("src/HashComparisonLists/" + hashingAlgo + ".txt"));
        int data1 = readCurrFile.read();
        int data2 = readKnownBad.read();
        
        //Read file data and compare to known signatures
        while (data1 != -1) 
        {
            if(readCurrFile.read()==readKnownBad.read())
                data2 = readKnownBad.read();             
            if (data2 ==-1)
                return "Malware has been detected!"; 
            data1 = readCurrFile.read();  
        }
        
        readCurrFile.close();
        readKnownBad.close();
        return "Malware was not detected";
    }

    //Compares given file among existing hash lists
    //Outputs true if file found in hash list, false if not in list
    private static String compareFiles(String fileName, String hashingAlgo) throws NoSuchAlgorithmException, IOException 
    {
      MessageDigest hashAlgo = MessageDigest.getInstance(hashingAlgo);
      File curFile = new File("src/" + fileName);
      String curHash = hashFile(hashAlgo, curFile);

      Scanner scan = new Scanner(new File("src/HashComparisonLists/" + hashingAlgo + ".txt"));
      while(scan.hasNext())
      {
        if(curHash.equals(scan.nextLine()))
          return "File found in " + hashingAlgo + " hash list";
      }
      return "File not found in " + hashingAlgo + " hash list";
    }

    //Compares given file among existing hash lists
    //Outputs true if file found in hash list, false if not in list
    private static String getFileHash(String fileName, String hashingAlgo) throws NoSuchAlgorithmException, IOException 
    {
      //Create the file to be hashed
      File fileToHash = new File("src/" + fileName);
      //Use message-digest algorithm
      MessageDigest hashAlgo = MessageDigest.getInstance(hashingAlgo);
      //gets hash and returns
      return hashFile(hashAlgo,fileToHash);
    }

    //Outputs the string representation of hash for inputted file
    private static String hashFile(MessageDigest md, File fileToHash) throws IOException
    {
      //Use file input stream to read the contents of file
      FileInputStream readFile = new FileInputStream(fileToHash);
       
      //Create array to read data in smaller pieces
      byte[] byteArr = new byte[1024];
      int bCount = 0; 
        
      //Read file data and update in message digest
      while ((bCount = readFile.read(byteArr)) != -1) 
      {
        md.update(byteArr, 0, bCount);
      }
       
      //close file input stream
      readFile.close();
       
      //Get the bytes of the hash
      byte[] bts = md.digest();
       
      //Convert bytes from decimal to hexadecimal format
      StringBuilder build = new StringBuilder();
      for(int i=0; i<bts.length; i++)
      {
        build.append(Integer.toString((bts[i] & 0xff) + 0x100, 16).substring(1));
      }
       
      //return hash of file
       return build.toString();
    }
}
